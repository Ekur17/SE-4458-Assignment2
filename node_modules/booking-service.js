const express = require("express");
const amqp = require("amqplib");
const app = express();
app.use(express.json()); // JSON verisini almak için middleware

const rabbitUrl = "amqp://localhost";
let channel;

// RabbitMQ bağlantısı
async function connectRabbitMQ() {
  const connection = await amqp.connect(rabbitUrl);
  channel = await connection.createChannel();
  await channel.assertQueue("payment_queue");
}

// Mesaj gönderme fonksiyonu
async function publishToQueue(queue, data) {
  await channel.sendToQueue(queue, Buffer.from(JSON.stringify(data)));
}

// Rezervasyon endpoint'i
app.post("/book", async (req, res) => {
  const { user, paymentType, cardNo } = req.body;

  // Gelen verilerin doğruluğunu kontrol et
  if (!user || !paymentType || !cardNo) {
    return res.status(400).json({ message: "Invalid booking data" });
  }

  // Rezervasyon simülasyonu
  const booking = { id: Date.now(), user, paymentType, cardNo }; // Örnek rezervasyon objesi
  const bookingReservedSuccessfully = true; // Rezervasyonun başarılı olduğunu simüle ediyoruz

  if (bookingReservedSuccessfully) {
    await publishToQueue("payment_queue", booking); // Mesajı RabbitMQ'ya gönder
    return res.status(200).json({ message: "Booking initiated", booking });
  } else {
    return res.status(500).json({ message: "Booking failed" });
  }
});

// Sunucuyu başlat
const PORT = 3000;
app.listen(PORT, async () => {
  console.log(`Booking Service listening on port ${PORT}`);
  await connectRabbitMQ();
});
